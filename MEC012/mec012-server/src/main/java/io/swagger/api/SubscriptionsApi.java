/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.22).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CellChangeSubscription;
import io.swagger.model.InlineSubscription;
import io.swagger.model.ProblemDetails;
import io.swagger.model.SubscriptionLinkList;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-12-17T10:14:37.794Z[Etc/UTC]")
@Api(value = "subscriptions", description = "the subscriptions API")
public interface SubscriptionsApi {

    @ApiOperation(value = "Retrieve information on subscriptions for notifications", nickname = "subscriptionLinkListSubscriptionsGET", notes = "Queries information on subscriptions for notifications", response = SubscriptionLinkList.class, tags={ "rni", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Response body contains the list of links to requestors subscriptions.", response = SubscriptionLinkList.class),
        @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubscriptionLinkList> subscriptionLinkListSubscriptionsGET(@ApiParam(value = "Filter on a specific subscription type. Permitted values: cell_change, rab_est, rab_mod, rab_rel, meas_rep_ue, nr_meas_rep_ue, timing_advance_ue, ca_reconf, s1_bearer.") @Valid @RequestParam(value = "subscription_type", required = false) String subscriptionType
);


    @ApiOperation(value = "Cancel an existing subscription", nickname = "subscriptionsDELETE", notes = "Cancels an existing subscription, identified by its self-referring URI returned on creation (initial POST)", tags={ "rni", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions/{subscriptionId}",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> subscriptionsDELETE(@ApiParam(value = "Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request",required=true) @PathVariable("subscriptionId") String subscriptionId
);


    @ApiOperation(value = "Retrieve information on current specific subscription", nickname = "subscriptionsGET", notes = "Queries information about an existing subscription, identified by its self-referring URI returned on creation (initial POST)", response = InlineSubscription.class, tags={ "rni", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Subscription information regarding subscription notifications", response = InlineSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions/{subscriptionId}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineSubscription> subscriptionsGET(@ApiParam(value = "Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request",required=true) @PathVariable("subscriptionId") String subscriptionId
);


    @ApiOperation(value = "Create a new subscription", nickname = "subscriptionsPOST", notes = "Creates a new subscription to Radio Network Information notifications", response = InlineSubscription.class, tags={ "rni", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful subscription", response = InlineSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Precondition failed :  used when a condition has failed during conditional requests, e.g. when using ETags to avoid write conflicts when using PUT", response = ProblemDetails.class),
        @ApiResponse(code = 422, message = "Unprocessable Entity : used to indicate that the server understands the content type of the request entity and that the syntax of the request entity is correct but that the server is unable to process the contained instructions. This error condition can occur if an JSON request body is syntactically correct but semantically incorrect, for example if the target area for the request is considered too large. This error condition can also occur if the capabilities required by the request are not supported.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    //ResponseEntity<InlineSubscription> subscriptionsPOST(@ApiParam(value = "Subscription to be created" ,required=true )  @Valid @RequestBody InlineSubscription body); Original
    ResponseEntity<CellChangeSubscription> subscriptionsPOST(@ApiParam(value = "Subscription to be created" ,required=true )  @Valid @RequestBody CellChangeSubscription body);


    @ApiOperation(value = "Modify an existing subscription", nickname = "subscriptionsPUT", notes = "Updates an existing subscription, identified by its self-referring URI returned on creation (initial POST)", response = InlineSubscription.class, tags={ "rni", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful subscription to response to subscription notifications", response = InlineSubscription.class),
        @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
        @ApiResponse(code = 412, message = "Precondition failed :  used when a condition has failed during conditional requests, e.g. when using ETags to avoid write conflicts when using PUT", response = ProblemDetails.class),
        @ApiResponse(code = 422, message = "Unprocessable Entity : used to indicate that the server understands the content type of the request entity and that the syntax of the request entity is correct but that the server is unable to process the contained instructions. This error condition can occur if an JSON request body is syntactically correct but semantically incorrect, for example if the target area for the request is considered too large. This error condition can also occur if the capabilities required by the request are not supported.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions/{subscriptionId}",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineSubscription> subscriptionsPUT(@ApiParam(value = "Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request",required=true) @PathVariable("subscriptionId") String subscriptionId
,@ApiParam(value = "Subscription to be modified" ,required=true )  @Valid @RequestBody InlineSubscription body
);

}

