/*
 * ETSI GS MEC 012 - Radio Network Information API
 * The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.
 *
 * OpenAPI spec version: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CaReconfNotification
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-12-09T15:33:56.133+01:00[Europe/Rome]")
public class CaReconfNotification implements OneOfInlineNotification {
  @SerializedName("associateId")
  private List<AssociateId> associateId = null;

  @SerializedName("carrierAggregationMeasInfo")
  private List<CaReconfNotificationCarrierAggregationMeasInfo> carrierAggregationMeasInfo = null;

  @SerializedName("ecgi")
  private Ecgi ecgi = null;

  @SerializedName("notificationType")
  private String notificationType = null;

  @SerializedName("secondaryCellAdd")
  private List<CaReconfNotificationSecondaryCellAdd> secondaryCellAdd = null;

  @SerializedName("secondaryCellRemove")
  private List<CaReconfNotificationSecondaryCellAdd> secondaryCellRemove = null;

  @SerializedName("timeStamp")
  private TimeStamp timeStamp = null;

  public CaReconfNotification associateId(List<AssociateId> associateId) {
    this.associateId = associateId;
    return this;
  }

  public CaReconfNotification addAssociateIdItem(AssociateId associateIdItem) {
    if (this.associateId == null) {
      this.associateId = new ArrayList<AssociateId>();
    }
    this.associateId.add(associateIdItem);
    return this;
  }

   /**
   * 0 to N identifiers to associate the event for a specific UE or flow.
   * @return associateId
  **/
  @Schema(description = "0 to N identifiers to associate the event for a specific UE or flow.")
  public List<AssociateId> getAssociateId() {
    return associateId;
  }

  public void setAssociateId(List<AssociateId> associateId) {
    this.associateId = associateId;
  }

  public CaReconfNotification carrierAggregationMeasInfo(List<CaReconfNotificationCarrierAggregationMeasInfo> carrierAggregationMeasInfo) {
    this.carrierAggregationMeasInfo = carrierAggregationMeasInfo;
    return this;
  }

  public CaReconfNotification addCarrierAggregationMeasInfoItem(CaReconfNotificationCarrierAggregationMeasInfo carrierAggregationMeasInfoItem) {
    if (this.carrierAggregationMeasInfo == null) {
      this.carrierAggregationMeasInfo = new ArrayList<CaReconfNotificationCarrierAggregationMeasInfo>();
    }
    this.carrierAggregationMeasInfo.add(carrierAggregationMeasInfoItem);
    return this;
  }

   /**
   * This parameter can be repeated to contain information of all the carriers assign for Carrier Aggregation up to M.
   * @return carrierAggregationMeasInfo
  **/
  @Schema(description = "This parameter can be repeated to contain information of all the carriers assign for Carrier Aggregation up to M.")
  public List<CaReconfNotificationCarrierAggregationMeasInfo> getCarrierAggregationMeasInfo() {
    return carrierAggregationMeasInfo;
  }

  public void setCarrierAggregationMeasInfo(List<CaReconfNotificationCarrierAggregationMeasInfo> carrierAggregationMeasInfo) {
    this.carrierAggregationMeasInfo = carrierAggregationMeasInfo;
  }

  public CaReconfNotification ecgi(Ecgi ecgi) {
    this.ecgi = ecgi;
    return this;
  }

   /**
   * Get ecgi
   * @return ecgi
  **/
  @Schema(required = true, description = "")
  public Ecgi getEcgi() {
    return ecgi;
  }

  public void setEcgi(Ecgi ecgi) {
    this.ecgi = ecgi;
  }

  public CaReconfNotification notificationType(String notificationType) {
    this.notificationType = notificationType;
    return this;
  }

   /**
   * Shall be set to \&quot;CaReConfNotification\&quot;.
   * @return notificationType
  **/
  @Schema(required = true, description = "Shall be set to \"CaReConfNotification\".")
  public String getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(String notificationType) {
    this.notificationType = notificationType;
  }

  public CaReconfNotification secondaryCellAdd(List<CaReconfNotificationSecondaryCellAdd> secondaryCellAdd) {
    this.secondaryCellAdd = secondaryCellAdd;
    return this;
  }

  public CaReconfNotification addSecondaryCellAddItem(CaReconfNotificationSecondaryCellAdd secondaryCellAddItem) {
    if (this.secondaryCellAdd == null) {
      this.secondaryCellAdd = new ArrayList<CaReconfNotificationSecondaryCellAdd>();
    }
    this.secondaryCellAdd.add(secondaryCellAddItem);
    return this;
  }

   /**
   * Get secondaryCellAdd
   * @return secondaryCellAdd
  **/
  @Schema(description = "")
  public List<CaReconfNotificationSecondaryCellAdd> getSecondaryCellAdd() {
    return secondaryCellAdd;
  }

  public void setSecondaryCellAdd(List<CaReconfNotificationSecondaryCellAdd> secondaryCellAdd) {
    this.secondaryCellAdd = secondaryCellAdd;
  }

  public CaReconfNotification secondaryCellRemove(List<CaReconfNotificationSecondaryCellAdd> secondaryCellRemove) {
    this.secondaryCellRemove = secondaryCellRemove;
    return this;
  }

  public CaReconfNotification addSecondaryCellRemoveItem(CaReconfNotificationSecondaryCellAdd secondaryCellRemoveItem) {
    if (this.secondaryCellRemove == null) {
      this.secondaryCellRemove = new ArrayList<CaReconfNotificationSecondaryCellAdd>();
    }
    this.secondaryCellRemove.add(secondaryCellRemoveItem);
    return this;
  }

   /**
   * Get secondaryCellRemove
   * @return secondaryCellRemove
  **/
  @Schema(description = "")
  public List<CaReconfNotificationSecondaryCellAdd> getSecondaryCellRemove() {
    return secondaryCellRemove;
  }

  public void setSecondaryCellRemove(List<CaReconfNotificationSecondaryCellAdd> secondaryCellRemove) {
    this.secondaryCellRemove = secondaryCellRemove;
  }

  public CaReconfNotification timeStamp(TimeStamp timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

   /**
   * Get timeStamp
   * @return timeStamp
  **/
  @Schema(description = "")
  public TimeStamp getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(TimeStamp timeStamp) {
    this.timeStamp = timeStamp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaReconfNotification caReconfNotification = (CaReconfNotification) o;
    return Objects.equals(this.associateId, caReconfNotification.associateId) &&
        Objects.equals(this.carrierAggregationMeasInfo, caReconfNotification.carrierAggregationMeasInfo) &&
        Objects.equals(this.ecgi, caReconfNotification.ecgi) &&
        Objects.equals(this.notificationType, caReconfNotification.notificationType) &&
        Objects.equals(this.secondaryCellAdd, caReconfNotification.secondaryCellAdd) &&
        Objects.equals(this.secondaryCellRemove, caReconfNotification.secondaryCellRemove) &&
        Objects.equals(this.timeStamp, caReconfNotification.timeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associateId, carrierAggregationMeasInfo, ecgi, notificationType, secondaryCellAdd, secondaryCellRemove, timeStamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaReconfNotification {\n");
    
    sb.append("    associateId: ").append(toIndentedString(associateId)).append("\n");
    sb.append("    carrierAggregationMeasInfo: ").append(toIndentedString(carrierAggregationMeasInfo)).append("\n");
    sb.append("    ecgi: ").append(toIndentedString(ecgi)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    secondaryCellAdd: ").append(toIndentedString(secondaryCellAdd)).append("\n");
    sb.append("    secondaryCellRemove: ").append(toIndentedString(secondaryCellRemove)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
