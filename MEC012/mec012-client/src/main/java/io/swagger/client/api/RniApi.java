/*
 * ETSI GS MEC 012 - Radio Network Information API
 * The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.
 *
 * OpenAPI spec version: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;
import io.swagger.client.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RniApi {
    private ApiClient apiClient;

    public RniApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RniApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for layer2MeasInfoGET
     * @param appInsId Application instance identifier (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param dlGbrPrbUsageCell PRB usage for downlink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPrbUsageCell PRB usage for uplink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPrbUsageCell PRB usage for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPrbUsageCell PRB usage for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlTotalPrbUsageCell PRB usage for total downlink traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulTotalPrbUsageCell PRB usage for total uplink traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedDedicatedPreamblesCell Received dedicated preambles in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedRandomlySelectedPreamblesLowRangeCell Received randomly selected preambles in the low range in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedRandomlySelectedPreamblesHighRangeCell Received rendomly selected preambles in the high range in percentage as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeDlGbrCell Number of active UEs with downlink GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeUlGbrCell Number of active UEs with uplink GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeDlNongbrCell Number of active UEs with downlink non-GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeUlNongbrCell Number of active UEs with uplink non-GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param dlGbrPdrCell Packet discard rate for downlink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPdrCell Packet discard rate for uplink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPdrCell Packet discard rate for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPdrCell Packet discard rate for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlGbrDelayUe Packet delay of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrDelayUe Packet delay of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrDelayUe Packet delay of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrDelayUe Packet delay of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlGbrPdrUe Packet discard rate of downlink GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPdrUe Packet discard rate of uplink GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPdrUe Packet discard rate of downlink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPdrUe Packet discard rate of uplink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlGbrThroughputUe Scheduled throughput of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrThroughputUe Scheduled throughput of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrThroughputUe Scheduled throughput of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrThroughputUe Scheduled throughput of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlGbrDataVolumeUe Data volume of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrDataVolumeUe Data volume of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrDataVolumeUe Data volume of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrDataVolumeUe Data volume of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layer2MeasInfoGETCall(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, Integer dlGbrPrbUsageCell, Integer ulGbrPrbUsageCell, Integer dlNongbrPrbUsageCell, Integer ulNongbrPrbUsageCell, Integer dlTotalPrbUsageCell, Integer ulTotalPrbUsageCell, Integer receivedDedicatedPreamblesCell, Integer receivedRandomlySelectedPreamblesLowRangeCell, Integer receivedRandomlySelectedPreamblesHighRangeCell, Integer numberOfActiveUeDlGbrCell, Integer numberOfActiveUeUlGbrCell, Integer numberOfActiveUeDlNongbrCell, Integer numberOfActiveUeUlNongbrCell, Integer dlGbrPdrCell, Integer ulGbrPdrCell, Integer dlNongbrPdrCell, Integer ulNongbrPdrCell, Integer dlGbrDelayUe, Integer ulGbrDelayUe, Integer dlNongbrDelayUe, Integer ulNongbrDelayUe, Integer dlGbrPdrUe, Integer ulGbrPdrUe, Integer dlNongbrPdrUe, Integer ulNongbrPdrUe, Integer dlGbrThroughputUe, Integer ulGbrThroughputUe, Integer dlNongbrThroughputUe, Integer ulNongbrThroughputUe, Integer dlGbrDataVolumeUe, Integer ulGbrDataVolumeUe, Integer dlNongbrDataVolumeUe, Integer ulNongbrDataVolumeUe, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/queries/layer2_meas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appInsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app_ins_id", appInsId));
        if (cellId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "cell_id", cellId));
        if (ueIpv4Address != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ue_ipv4_address", ueIpv4Address));
        if (ueIpv6Address != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ue_ipv6_address", ueIpv6Address));
        if (natedIpAddress != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "nated_ip_address", natedIpAddress));
        if (gtpTeid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "gtp_teid", gtpTeid));
        if (dlGbrPrbUsageCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_gbr_prb_usage_cell", dlGbrPrbUsageCell));
        if (ulGbrPrbUsageCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_gbr_prb_usage_cell", ulGbrPrbUsageCell));
        if (dlNongbrPrbUsageCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_nongbr_prb_usage_cell", dlNongbrPrbUsageCell));
        if (ulNongbrPrbUsageCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_nongbr_prb_usage_cell", ulNongbrPrbUsageCell));
        if (dlTotalPrbUsageCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_total_prb_usage_cell", dlTotalPrbUsageCell));
        if (ulTotalPrbUsageCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_total_prb_usage_cell", ulTotalPrbUsageCell));
        if (receivedDedicatedPreamblesCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("received_dedicated_preambles_cell", receivedDedicatedPreamblesCell));
        if (receivedRandomlySelectedPreamblesLowRangeCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("received_randomly_selected_preambles_low_range_cell", receivedRandomlySelectedPreamblesLowRangeCell));
        if (receivedRandomlySelectedPreamblesHighRangeCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("received_randomly_selected_preambles_high_range_cell", receivedRandomlySelectedPreamblesHighRangeCell));
        if (numberOfActiveUeDlGbrCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("number_of_active_ue_dl_gbr_cell", numberOfActiveUeDlGbrCell));
        if (numberOfActiveUeUlGbrCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("number_of_active_ue_ul_gbr_cell", numberOfActiveUeUlGbrCell));
        if (numberOfActiveUeDlNongbrCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("number_of_active_ue_dl_nongbr_cell", numberOfActiveUeDlNongbrCell));
        if (numberOfActiveUeUlNongbrCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("number_of_active_ue_ul_nongbr_cell", numberOfActiveUeUlNongbrCell));
        if (dlGbrPdrCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_gbr_pdr_cell", dlGbrPdrCell));
        if (ulGbrPdrCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_gbr_pdr_cell", ulGbrPdrCell));
        if (dlNongbrPdrCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_nongbr_pdr_cell", dlNongbrPdrCell));
        if (ulNongbrPdrCell != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_nongbr_pdr_cell", ulNongbrPdrCell));
        if (dlGbrDelayUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_gbr_delay_ue", dlGbrDelayUe));
        if (ulGbrDelayUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_gbr_delay_ue", ulGbrDelayUe));
        if (dlNongbrDelayUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_nongbr_delay_ue", dlNongbrDelayUe));
        if (ulNongbrDelayUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_nongbr_delay_ue", ulNongbrDelayUe));
        if (dlGbrPdrUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_gbr_pdr_ue", dlGbrPdrUe));
        if (ulGbrPdrUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_gbr_pdr_ue", ulGbrPdrUe));
        if (dlNongbrPdrUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_nongbr_pdr_ue", dlNongbrPdrUe));
        if (ulNongbrPdrUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_nongbr_pdr_ue", ulNongbrPdrUe));
        if (dlGbrThroughputUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_gbr_throughput_ue", dlGbrThroughputUe));
        if (ulGbrThroughputUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_gbr_throughput_ue", ulGbrThroughputUe));
        if (dlNongbrThroughputUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_nongbr_throughput_ue", dlNongbrThroughputUe));
        if (ulNongbrThroughputUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_nongbr_throughput_ue", ulNongbrThroughputUe));
        if (dlGbrDataVolumeUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_gbr_data_volume_ue", dlGbrDataVolumeUe));
        if (ulGbrDataVolumeUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_gbr_data_volume_ue", ulGbrDataVolumeUe));
        if (dlNongbrDataVolumeUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dl_nongbr_data_volume_ue", dlNongbrDataVolumeUe));
        if (ulNongbrDataVolumeUe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ul_nongbr_data_volume_ue", ulNongbrDataVolumeUe));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layer2MeasInfoGETValidateBeforeCall(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, Integer dlGbrPrbUsageCell, Integer ulGbrPrbUsageCell, Integer dlNongbrPrbUsageCell, Integer ulNongbrPrbUsageCell, Integer dlTotalPrbUsageCell, Integer ulTotalPrbUsageCell, Integer receivedDedicatedPreamblesCell, Integer receivedRandomlySelectedPreamblesLowRangeCell, Integer receivedRandomlySelectedPreamblesHighRangeCell, Integer numberOfActiveUeDlGbrCell, Integer numberOfActiveUeUlGbrCell, Integer numberOfActiveUeDlNongbrCell, Integer numberOfActiveUeUlNongbrCell, Integer dlGbrPdrCell, Integer ulGbrPdrCell, Integer dlNongbrPdrCell, Integer ulNongbrPdrCell, Integer dlGbrDelayUe, Integer ulGbrDelayUe, Integer dlNongbrDelayUe, Integer ulNongbrDelayUe, Integer dlGbrPdrUe, Integer ulGbrPdrUe, Integer dlNongbrPdrUe, Integer ulNongbrPdrUe, Integer dlGbrThroughputUe, Integer ulGbrThroughputUe, Integer dlNongbrThroughputUe, Integer ulNongbrThroughputUe, Integer dlGbrDataVolumeUe, Integer ulGbrDataVolumeUe, Integer dlNongbrDataVolumeUe, Integer ulNongbrDataVolumeUe, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = layer2MeasInfoGETCall(appInsId, cellId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, dlGbrPrbUsageCell, ulGbrPrbUsageCell, dlNongbrPrbUsageCell, ulNongbrPrbUsageCell, dlTotalPrbUsageCell, ulTotalPrbUsageCell, receivedDedicatedPreamblesCell, receivedRandomlySelectedPreamblesLowRangeCell, receivedRandomlySelectedPreamblesHighRangeCell, numberOfActiveUeDlGbrCell, numberOfActiveUeUlGbrCell, numberOfActiveUeDlNongbrCell, numberOfActiveUeUlNongbrCell, dlGbrPdrCell, ulGbrPdrCell, dlNongbrPdrCell, ulNongbrPdrCell, dlGbrDelayUe, ulGbrDelayUe, dlNongbrDelayUe, ulNongbrDelayUe, dlGbrPdrUe, ulGbrPdrUe, dlNongbrPdrUe, ulNongbrPdrUe, dlGbrThroughputUe, ulGbrThroughputUe, dlNongbrThroughputUe, ulNongbrThroughputUe, dlGbrDataVolumeUe, ulGbrDataVolumeUe, dlNongbrDataVolumeUe, ulNongbrDataVolumeUe, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve information on layer 2 measurements
     * Queries information about the layer 2 measurements.
     * @param appInsId Application instance identifier (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param dlGbrPrbUsageCell PRB usage for downlink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPrbUsageCell PRB usage for uplink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPrbUsageCell PRB usage for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPrbUsageCell PRB usage for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlTotalPrbUsageCell PRB usage for total downlink traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulTotalPrbUsageCell PRB usage for total uplink traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedDedicatedPreamblesCell Received dedicated preambles in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedRandomlySelectedPreamblesLowRangeCell Received randomly selected preambles in the low range in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedRandomlySelectedPreamblesHighRangeCell Received rendomly selected preambles in the high range in percentage as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeDlGbrCell Number of active UEs with downlink GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeUlGbrCell Number of active UEs with uplink GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeDlNongbrCell Number of active UEs with downlink non-GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeUlNongbrCell Number of active UEs with uplink non-GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param dlGbrPdrCell Packet discard rate for downlink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPdrCell Packet discard rate for uplink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPdrCell Packet discard rate for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPdrCell Packet discard rate for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlGbrDelayUe Packet delay of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrDelayUe Packet delay of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrDelayUe Packet delay of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrDelayUe Packet delay of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlGbrPdrUe Packet discard rate of downlink GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPdrUe Packet discard rate of uplink GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPdrUe Packet discard rate of downlink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPdrUe Packet discard rate of uplink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlGbrThroughputUe Scheduled throughput of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrThroughputUe Scheduled throughput of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrThroughputUe Scheduled throughput of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrThroughputUe Scheduled throughput of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlGbrDataVolumeUe Data volume of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrDataVolumeUe Data volume of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrDataVolumeUe Data volume of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrDataVolumeUe Data volume of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @return L2Meas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public L2Meas layer2MeasInfoGET(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, Integer dlGbrPrbUsageCell, Integer ulGbrPrbUsageCell, Integer dlNongbrPrbUsageCell, Integer ulNongbrPrbUsageCell, Integer dlTotalPrbUsageCell, Integer ulTotalPrbUsageCell, Integer receivedDedicatedPreamblesCell, Integer receivedRandomlySelectedPreamblesLowRangeCell, Integer receivedRandomlySelectedPreamblesHighRangeCell, Integer numberOfActiveUeDlGbrCell, Integer numberOfActiveUeUlGbrCell, Integer numberOfActiveUeDlNongbrCell, Integer numberOfActiveUeUlNongbrCell, Integer dlGbrPdrCell, Integer ulGbrPdrCell, Integer dlNongbrPdrCell, Integer ulNongbrPdrCell, Integer dlGbrDelayUe, Integer ulGbrDelayUe, Integer dlNongbrDelayUe, Integer ulNongbrDelayUe, Integer dlGbrPdrUe, Integer ulGbrPdrUe, Integer dlNongbrPdrUe, Integer ulNongbrPdrUe, Integer dlGbrThroughputUe, Integer ulGbrThroughputUe, Integer dlNongbrThroughputUe, Integer ulNongbrThroughputUe, Integer dlGbrDataVolumeUe, Integer ulGbrDataVolumeUe, Integer dlNongbrDataVolumeUe, Integer ulNongbrDataVolumeUe) throws ApiException {
        ApiResponse<L2Meas> resp = layer2MeasInfoGETWithHttpInfo(appInsId, cellId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, dlGbrPrbUsageCell, ulGbrPrbUsageCell, dlNongbrPrbUsageCell, ulNongbrPrbUsageCell, dlTotalPrbUsageCell, ulTotalPrbUsageCell, receivedDedicatedPreamblesCell, receivedRandomlySelectedPreamblesLowRangeCell, receivedRandomlySelectedPreamblesHighRangeCell, numberOfActiveUeDlGbrCell, numberOfActiveUeUlGbrCell, numberOfActiveUeDlNongbrCell, numberOfActiveUeUlNongbrCell, dlGbrPdrCell, ulGbrPdrCell, dlNongbrPdrCell, ulNongbrPdrCell, dlGbrDelayUe, ulGbrDelayUe, dlNongbrDelayUe, ulNongbrDelayUe, dlGbrPdrUe, ulGbrPdrUe, dlNongbrPdrUe, ulNongbrPdrUe, dlGbrThroughputUe, ulGbrThroughputUe, dlNongbrThroughputUe, ulNongbrThroughputUe, dlGbrDataVolumeUe, ulGbrDataVolumeUe, dlNongbrDataVolumeUe, ulNongbrDataVolumeUe);
        return resp.getData();
    }

    /**
     * Retrieve information on layer 2 measurements
     * Queries information about the layer 2 measurements.
     * @param appInsId Application instance identifier (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param dlGbrPrbUsageCell PRB usage for downlink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPrbUsageCell PRB usage for uplink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPrbUsageCell PRB usage for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPrbUsageCell PRB usage for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlTotalPrbUsageCell PRB usage for total downlink traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulTotalPrbUsageCell PRB usage for total uplink traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedDedicatedPreamblesCell Received dedicated preambles in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedRandomlySelectedPreamblesLowRangeCell Received randomly selected preambles in the low range in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedRandomlySelectedPreamblesHighRangeCell Received rendomly selected preambles in the high range in percentage as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeDlGbrCell Number of active UEs with downlink GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeUlGbrCell Number of active UEs with uplink GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeDlNongbrCell Number of active UEs with downlink non-GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeUlNongbrCell Number of active UEs with uplink non-GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param dlGbrPdrCell Packet discard rate for downlink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPdrCell Packet discard rate for uplink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPdrCell Packet discard rate for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPdrCell Packet discard rate for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlGbrDelayUe Packet delay of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrDelayUe Packet delay of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrDelayUe Packet delay of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrDelayUe Packet delay of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlGbrPdrUe Packet discard rate of downlink GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPdrUe Packet discard rate of uplink GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPdrUe Packet discard rate of downlink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPdrUe Packet discard rate of uplink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlGbrThroughputUe Scheduled throughput of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrThroughputUe Scheduled throughput of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrThroughputUe Scheduled throughput of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrThroughputUe Scheduled throughput of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlGbrDataVolumeUe Data volume of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrDataVolumeUe Data volume of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrDataVolumeUe Data volume of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrDataVolumeUe Data volume of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @return ApiResponse&lt;L2Meas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<L2Meas> layer2MeasInfoGETWithHttpInfo(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, Integer dlGbrPrbUsageCell, Integer ulGbrPrbUsageCell, Integer dlNongbrPrbUsageCell, Integer ulNongbrPrbUsageCell, Integer dlTotalPrbUsageCell, Integer ulTotalPrbUsageCell, Integer receivedDedicatedPreamblesCell, Integer receivedRandomlySelectedPreamblesLowRangeCell, Integer receivedRandomlySelectedPreamblesHighRangeCell, Integer numberOfActiveUeDlGbrCell, Integer numberOfActiveUeUlGbrCell, Integer numberOfActiveUeDlNongbrCell, Integer numberOfActiveUeUlNongbrCell, Integer dlGbrPdrCell, Integer ulGbrPdrCell, Integer dlNongbrPdrCell, Integer ulNongbrPdrCell, Integer dlGbrDelayUe, Integer ulGbrDelayUe, Integer dlNongbrDelayUe, Integer ulNongbrDelayUe, Integer dlGbrPdrUe, Integer ulGbrPdrUe, Integer dlNongbrPdrUe, Integer ulNongbrPdrUe, Integer dlGbrThroughputUe, Integer ulGbrThroughputUe, Integer dlNongbrThroughputUe, Integer ulNongbrThroughputUe, Integer dlGbrDataVolumeUe, Integer ulGbrDataVolumeUe, Integer dlNongbrDataVolumeUe, Integer ulNongbrDataVolumeUe) throws ApiException {
        com.squareup.okhttp.Call call = layer2MeasInfoGETValidateBeforeCall(appInsId, cellId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, dlGbrPrbUsageCell, ulGbrPrbUsageCell, dlNongbrPrbUsageCell, ulNongbrPrbUsageCell, dlTotalPrbUsageCell, ulTotalPrbUsageCell, receivedDedicatedPreamblesCell, receivedRandomlySelectedPreamblesLowRangeCell, receivedRandomlySelectedPreamblesHighRangeCell, numberOfActiveUeDlGbrCell, numberOfActiveUeUlGbrCell, numberOfActiveUeDlNongbrCell, numberOfActiveUeUlNongbrCell, dlGbrPdrCell, ulGbrPdrCell, dlNongbrPdrCell, ulNongbrPdrCell, dlGbrDelayUe, ulGbrDelayUe, dlNongbrDelayUe, ulNongbrDelayUe, dlGbrPdrUe, ulGbrPdrUe, dlNongbrPdrUe, ulNongbrPdrUe, dlGbrThroughputUe, ulGbrThroughputUe, dlNongbrThroughputUe, ulNongbrThroughputUe, dlGbrDataVolumeUe, ulGbrDataVolumeUe, dlNongbrDataVolumeUe, ulNongbrDataVolumeUe, null, null);
        Type localVarReturnType = new TypeToken<L2Meas>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve information on layer 2 measurements (asynchronously)
     * Queries information about the layer 2 measurements.
     * @param appInsId Application instance identifier (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param dlGbrPrbUsageCell PRB usage for downlink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPrbUsageCell PRB usage for uplink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPrbUsageCell PRB usage for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPrbUsageCell PRB usage for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlTotalPrbUsageCell PRB usage for total downlink traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulTotalPrbUsageCell PRB usage for total uplink traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedDedicatedPreamblesCell Received dedicated preambles in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedRandomlySelectedPreamblesLowRangeCell Received randomly selected preambles in the low range in percentage as defined in ETSI TS 136 314 (optional)
     * @param receivedRandomlySelectedPreamblesHighRangeCell Received rendomly selected preambles in the high range in percentage as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeDlGbrCell Number of active UEs with downlink GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeUlGbrCell Number of active UEs with uplink GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeDlNongbrCell Number of active UEs with downlink non-GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param numberOfActiveUeUlNongbrCell Number of active UEs with uplink non-GBR traffic as defined in ETSI TS 136 314 (optional)
     * @param dlGbrPdrCell Packet discard rate for downlink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPdrCell Packet discard rate for uplink GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPdrCell Packet discard rate for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPdrCell Packet discard rate for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlGbrDelayUe Packet delay of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrDelayUe Packet delay of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrDelayUe Packet delay of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrDelayUe Packet delay of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlGbrPdrUe Packet discard rate of downlink GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulGbrPdrUe Packet discard rate of uplink GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrPdrUe Packet discard rate of downlink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrPdrUe Packet discard rate of uplink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314 (optional)
     * @param dlGbrThroughputUe Scheduled throughput of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrThroughputUe Scheduled throughput of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrThroughputUe Scheduled throughput of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrThroughputUe Scheduled throughput of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlGbrDataVolumeUe Data volume of downlink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulGbrDataVolumeUe Data volume of uplink GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param dlNongbrDataVolumeUe Data volume of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param ulNongbrDataVolumeUe Data volume of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layer2MeasInfoGETAsync(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, Integer dlGbrPrbUsageCell, Integer ulGbrPrbUsageCell, Integer dlNongbrPrbUsageCell, Integer ulNongbrPrbUsageCell, Integer dlTotalPrbUsageCell, Integer ulTotalPrbUsageCell, Integer receivedDedicatedPreamblesCell, Integer receivedRandomlySelectedPreamblesLowRangeCell, Integer receivedRandomlySelectedPreamblesHighRangeCell, Integer numberOfActiveUeDlGbrCell, Integer numberOfActiveUeUlGbrCell, Integer numberOfActiveUeDlNongbrCell, Integer numberOfActiveUeUlNongbrCell, Integer dlGbrPdrCell, Integer ulGbrPdrCell, Integer dlNongbrPdrCell, Integer ulNongbrPdrCell, Integer dlGbrDelayUe, Integer ulGbrDelayUe, Integer dlNongbrDelayUe, Integer ulNongbrDelayUe, Integer dlGbrPdrUe, Integer ulGbrPdrUe, Integer dlNongbrPdrUe, Integer ulNongbrPdrUe, Integer dlGbrThroughputUe, Integer ulGbrThroughputUe, Integer dlNongbrThroughputUe, Integer ulNongbrThroughputUe, Integer dlGbrDataVolumeUe, Integer ulGbrDataVolumeUe, Integer dlNongbrDataVolumeUe, Integer ulNongbrDataVolumeUe, final ApiCallback<L2Meas> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layer2MeasInfoGETValidateBeforeCall(appInsId, cellId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, dlGbrPrbUsageCell, ulGbrPrbUsageCell, dlNongbrPrbUsageCell, ulNongbrPrbUsageCell, dlTotalPrbUsageCell, ulTotalPrbUsageCell, receivedDedicatedPreamblesCell, receivedRandomlySelectedPreamblesLowRangeCell, receivedRandomlySelectedPreamblesHighRangeCell, numberOfActiveUeDlGbrCell, numberOfActiveUeUlGbrCell, numberOfActiveUeDlNongbrCell, numberOfActiveUeUlNongbrCell, dlGbrPdrCell, ulGbrPdrCell, dlNongbrPdrCell, ulNongbrPdrCell, dlGbrDelayUe, ulGbrDelayUe, dlNongbrDelayUe, ulNongbrDelayUe, dlGbrPdrUe, ulGbrPdrUe, dlNongbrPdrUe, ulNongbrPdrUe, dlGbrThroughputUe, ulGbrThroughputUe, dlNongbrThroughputUe, ulNongbrThroughputUe, dlGbrDataVolumeUe, ulGbrDataVolumeUe, dlNongbrDataVolumeUe, ulNongbrDataVolumeUe, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<L2Meas>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for plmnInfoGET
     * @param appInsId Comma separated list of Application instance identifiers (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call plmnInfoGETCall(List<String> appInsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/queries/plmn_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appInsId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "app_ins_id", appInsId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call plmnInfoGETValidateBeforeCall(List<String> appInsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appInsId' is set
        if (appInsId == null) {
            throw new ApiException("Missing the required parameter 'appInsId' when calling plmnInfoGET(Async)");
        }
        
        com.squareup.okhttp.Call call = plmnInfoGETCall(appInsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve information on the underlying Mobile Network that the MEC application is associated to
     * Queries information about the Mobile Network
     * @param appInsId Comma separated list of Application instance identifiers (required)
     * @return List&lt;PlmnInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PlmnInfo> plmnInfoGET(List<String> appInsId) throws ApiException {
        ApiResponse<List<PlmnInfo>> resp = plmnInfoGETWithHttpInfo(appInsId);
        return resp.getData();
    }

    /**
     * Retrieve information on the underlying Mobile Network that the MEC application is associated to
     * Queries information about the Mobile Network
     * @param appInsId Comma separated list of Application instance identifiers (required)
     * @return ApiResponse&lt;List&lt;PlmnInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PlmnInfo>> plmnInfoGETWithHttpInfo(List<String> appInsId) throws ApiException {
        com.squareup.okhttp.Call call = plmnInfoGETValidateBeforeCall(appInsId, null, null);
        Type localVarReturnType = new TypeToken<List<PlmnInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve information on the underlying Mobile Network that the MEC application is associated to (asynchronously)
     * Queries information about the Mobile Network
     * @param appInsId Comma separated list of Application instance identifiers (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call plmnInfoGETAsync(List<String> appInsId, final ApiCallback<List<PlmnInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = plmnInfoGETValidateBeforeCall(appInsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PlmnInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rabInfoGET
     * @param appInsId Application instance identifier (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param erabId E-RAB identifier (optional)
     * @param qci QoS Class Identifier as defined in ETSI TS 123 401 (optional)
     * @param erabMbrDl Maximum downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabMbrUl Maximum uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabGbrDl Guaranteed downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabGbrUl Guaranteed uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rabInfoGETCall(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, Integer erabId, Integer qci, Integer erabMbrDl, Integer erabMbrUl, Integer erabGbrDl, Integer erabGbrUl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/queries/rab_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appInsId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app_ins_id", appInsId));
        if (cellId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "cell_id", cellId));
        if (ueIpv4Address != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ue_ipv4_address", ueIpv4Address));
        if (ueIpv6Address != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ue_ipv6_address", ueIpv6Address));
        if (natedIpAddress != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "nated_ip_address", natedIpAddress));
        if (gtpTeid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "gtp_teid", gtpTeid));
        if (erabId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("erab_id", erabId));
        if (qci != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("qci", qci));
        if (erabMbrDl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("erab_mbr_dl", erabMbrDl));
        if (erabMbrUl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("erab_mbr_ul", erabMbrUl));
        if (erabGbrDl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("erab_gbr_dl", erabGbrDl));
        if (erabGbrUl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("erab_gbr_ul", erabGbrUl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rabInfoGETValidateBeforeCall(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, Integer erabId, Integer qci, Integer erabMbrDl, Integer erabMbrUl, Integer erabGbrDl, Integer erabGbrUl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = rabInfoGETCall(appInsId, cellId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, erabId, qci, erabMbrDl, erabMbrUl, erabGbrDl, erabGbrUl, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve information on Radio Access Bearers
     * Queries information about the Radio Access Bearers
     * @param appInsId Application instance identifier (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param erabId E-RAB identifier (optional)
     * @param qci QoS Class Identifier as defined in ETSI TS 123 401 (optional)
     * @param erabMbrDl Maximum downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabMbrUl Maximum uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabGbrDl Guaranteed downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabGbrUl Guaranteed uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @return RabInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RabInfo rabInfoGET(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address,
                              List<String> natedIpAddress, List<String> gtpTeid, Integer erabId, Integer qci, Integer erabMbrDl,
                              Integer erabMbrUl, Integer erabGbrDl, Integer erabGbrUl) throws ApiException {
        ApiResponse<RabInfo> resp = rabInfoGETWithHttpInfo(appInsId, cellId, ueIpv4Address, ueIpv6Address, natedIpAddress,
                                                        gtpTeid, erabId, qci, erabMbrDl, erabMbrUl, erabGbrDl, erabGbrUl);
        return resp.getData();
    }

    /**
     * Retrieve information on Radio Access Bearers
     * Queries information about the Radio Access Bearers
     * @param appInsId Application instance identifier (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param erabId E-RAB identifier (optional)
     * @param qci QoS Class Identifier as defined in ETSI TS 123 401 (optional)
     * @param erabMbrDl Maximum downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabMbrUl Maximum uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabGbrDl Guaranteed downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabGbrUl Guaranteed uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @return ApiResponse&lt;RabInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RabInfo> rabInfoGETWithHttpInfo(String appInsId, List<String> cellId, List<String> ueIpv4Address,
                                                       List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid,
                                                       Integer erabId, Integer qci, Integer erabMbrDl, Integer erabMbrUl,
                                                       Integer erabGbrDl, Integer erabGbrUl) throws ApiException {
        com.squareup.okhttp.Call call = rabInfoGETValidateBeforeCall(appInsId, cellId, ueIpv4Address, ueIpv6Address,
                                        natedIpAddress, gtpTeid, erabId, qci, erabMbrDl, erabMbrUl, erabGbrDl, erabGbrUl,
                                        null, null);
        Type localVarReturnType = new TypeToken<RabInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve information on Radio Access Bearers (asynchronously)
     * Queries information about the Radio Access Bearers
     * @param appInsId Application instance identifier (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param erabId E-RAB identifier (optional)
     * @param qci QoS Class Identifier as defined in ETSI TS 123 401 (optional)
     * @param erabMbrDl Maximum downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabMbrUl Maximum uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabGbrDl Guaranteed downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param erabGbrUl Guaranteed uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rabInfoGETAsync(String appInsId, List<String> cellId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, Integer erabId, Integer qci, Integer erabMbrDl, Integer erabMbrUl, Integer erabGbrDl, Integer erabGbrUl, final ApiCallback<RabInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rabInfoGETValidateBeforeCall(appInsId, cellId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, erabId, qci, erabMbrDl, erabMbrUl, erabGbrDl, erabGbrUl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RabInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for s1BearerInfoGET
     * @param tempUeId Comma separated list of temporary identifiers allocated for the specific UE as defined in   ETSI TS 136 413 (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param erabId Comma separated list of E-RAB identifiers (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call s1BearerInfoGETCall(List<String> tempUeId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, List<String> cellId, List<Integer> erabId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/queries/s1_bearer_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tempUeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "temp_ue_id", tempUeId));
        if (ueIpv4Address != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ue_ipv4_address", ueIpv4Address));
        if (ueIpv6Address != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ue_ipv6_address", ueIpv6Address));
        if (natedIpAddress != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "nated_ip_address", natedIpAddress));
        if (gtpTeid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "gtp_teid", gtpTeid));
        if (cellId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "cell_id", cellId));
        if (erabId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "erab_id", erabId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call s1BearerInfoGETValidateBeforeCall(List<String> tempUeId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, List<String> cellId, List<Integer> erabId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = s1BearerInfoGETCall(tempUeId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, cellId, erabId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve S1-U bearer information related to specific UE(s)
     * Queries information about the S1 bearer(s)
     * @param tempUeId Comma separated list of temporary identifiers allocated for the specific UE as defined in   ETSI TS 136 413 (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param erabId Comma separated list of E-RAB identifiers (optional)
     * @return S1BearerInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public S1BearerInfo s1BearerInfoGET(List<String> tempUeId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, List<String> cellId, List<Integer> erabId) throws ApiException {
        ApiResponse<S1BearerInfo> resp = s1BearerInfoGETWithHttpInfo(tempUeId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, cellId, erabId);
        return resp.getData();
    }

    /**
     * Retrieve S1-U bearer information related to specific UE(s)
     * Queries information about the S1 bearer(s)
     * @param tempUeId Comma separated list of temporary identifiers allocated for the specific UE as defined in   ETSI TS 136 413 (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param erabId Comma separated list of E-RAB identifiers (optional)
     * @return ApiResponse&lt;S1BearerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<S1BearerInfo> s1BearerInfoGETWithHttpInfo(List<String> tempUeId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, List<String> cellId, List<Integer> erabId) throws ApiException {
        com.squareup.okhttp.Call call = s1BearerInfoGETValidateBeforeCall(tempUeId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, cellId, erabId, null, null);
        Type localVarReturnType = new TypeToken<S1BearerInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve S1-U bearer information related to specific UE(s) (asynchronously)
     * Queries information about the S1 bearer(s)
     * @param tempUeId Comma separated list of temporary identifiers allocated for the specific UE as defined in   ETSI TS 136 413 (optional)
     * @param ueIpv4Address Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional)
     * @param ueIpv6Address Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional)
     * @param natedIpAddress Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional)
     * @param gtpTeid Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional)
     * @param cellId Comma separated list of E-UTRAN Cell Identities (optional)
     * @param erabId Comma separated list of E-RAB identifiers (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call s1BearerInfoGETAsync(List<String> tempUeId, List<String> ueIpv4Address, List<String> ueIpv6Address, List<String> natedIpAddress, List<String> gtpTeid, List<String> cellId, List<Integer> erabId, final ApiCallback<S1BearerInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = s1BearerInfoGETValidateBeforeCall(tempUeId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, cellId, erabId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<S1BearerInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscriptionLinkListSubscriptionsGET
     * @param subscriptionType Filter on a specific subscription type. Permitted values: cell_change, rab_est, rab_mod, rab_rel, meas_rep_ue, nr_meas_rep_ue, timing_advance_ue, ca_reconf, s1_bearer. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionLinkListSubscriptionsGETCall(String subscriptionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (subscriptionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("subscription_type", subscriptionType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionLinkListSubscriptionsGETValidateBeforeCall(String subscriptionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = subscriptionLinkListSubscriptionsGETCall(subscriptionType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve information on subscriptions for notifications
     * Queries information on subscriptions for notifications
     * @param subscriptionType Filter on a specific subscription type. Permitted values: cell_change, rab_est, rab_mod, rab_rel, meas_rep_ue, nr_meas_rep_ue, timing_advance_ue, ca_reconf, s1_bearer. (optional)
     * @return SubscriptionLinkList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscriptionLinkList subscriptionLinkListSubscriptionsGET(String subscriptionType) throws ApiException {
        ApiResponse<SubscriptionLinkList> resp = subscriptionLinkListSubscriptionsGETWithHttpInfo(subscriptionType);
        return resp.getData();
    }

    /**
     * Retrieve information on subscriptions for notifications
     * Queries information on subscriptions for notifications
     * @param subscriptionType Filter on a specific subscription type. Permitted values: cell_change, rab_est, rab_mod, rab_rel, meas_rep_ue, nr_meas_rep_ue, timing_advance_ue, ca_reconf, s1_bearer. (optional)
     * @return ApiResponse&lt;SubscriptionLinkList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscriptionLinkList> subscriptionLinkListSubscriptionsGETWithHttpInfo(String subscriptionType) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionLinkListSubscriptionsGETValidateBeforeCall(subscriptionType, null, null);
        Type localVarReturnType = new TypeToken<SubscriptionLinkList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve information on subscriptions for notifications (asynchronously)
     * Queries information on subscriptions for notifications
     * @param subscriptionType Filter on a specific subscription type. Permitted values: cell_change, rab_est, rab_mod, rab_rel, meas_rep_ue, nr_meas_rep_ue, timing_advance_ue, ca_reconf, s1_bearer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionLinkListSubscriptionsGETAsync(String subscriptionType, final ApiCallback<SubscriptionLinkList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionLinkListSubscriptionsGETValidateBeforeCall(subscriptionType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscriptionLinkList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscriptionsDELETE
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionsDELETECall(String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionsDELETEValidateBeforeCall(String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionsDELETE(Async)");
        }
        
        com.squareup.okhttp.Call call = subscriptionsDELETECall(subscriptionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel an existing subscription
     * Cancels an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void subscriptionsDELETE(String subscriptionId) throws ApiException {
        subscriptionsDELETEWithHttpInfo(subscriptionId);
    }

    /**
     * Cancel an existing subscription
     * Cancels an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> subscriptionsDELETEWithHttpInfo(String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionsDELETEValidateBeforeCall(subscriptionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancel an existing subscription (asynchronously)
     * Cancels an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionsDELETEAsync(String subscriptionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionsDELETEValidateBeforeCall(subscriptionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for subscriptionsGET
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionsGETCall(String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionsGETValidateBeforeCall(String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionsGET(Async)");
        }
        
        com.squareup.okhttp.Call call = subscriptionsGETCall(subscriptionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve information on current specific subscription
     * Queries information about an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @return InlineSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineSubscription subscriptionsGET(String subscriptionId) throws ApiException {
        ApiResponse<InlineSubscription> resp = subscriptionsGETWithHttpInfo(subscriptionId);
        return resp.getData();
    }

    /**
     * Retrieve information on current specific subscription
     * Queries information about an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @return ApiResponse&lt;InlineSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineSubscription> subscriptionsGETWithHttpInfo(String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionsGETValidateBeforeCall(subscriptionId, null, null);
        Type localVarReturnType = new TypeToken<InlineSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve information on current specific subscription (asynchronously)
     * Queries information about an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionsGETAsync(String subscriptionId, final ApiCallback<InlineSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionsGETValidateBeforeCall(subscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscriptionsPOST
     * @param body Subscription to be created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionsPOSTCall(CellChangeSubscription body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionsPOSTValidateBeforeCall(CellChangeSubscription body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subscriptionsPOST(Async)");
        }
        
        com.squareup.okhttp.Call call = subscriptionsPOSTCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new subscription
     * Creates a new subscription to Radio Network Information notifications
     * @param body Subscription to be created (required)
     * @return InlineSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineSubscription subscriptionsPOST(CellChangeSubscription body) throws ApiException {
        ApiResponse<InlineSubscription> resp = subscriptionsPOSTWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new subscription
     * Creates a new subscription to Radio Network Information notifications
     * @param body Subscription to be created (required)
     * @return ApiResponse&lt;InlineSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineSubscription> subscriptionsPOSTWithHttpInfo(CellChangeSubscription body) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionsPOSTValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InlineSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new subscription (asynchronously)
     * Creates a new subscription to Radio Network Information notifications
     * @param body Subscription to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionsPOSTAsync(CellChangeSubscription body, final ApiCallback<InlineSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionsPOSTValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscriptionsPUT
     * @param body Subscription to be modified (required)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionsPUTCall(InlineSubscription body, String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionsPUTValidateBeforeCall(InlineSubscription body, String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subscriptionsPUT(Async)");
        }
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionsPUT(Async)");
        }
        
        com.squareup.okhttp.Call call = subscriptionsPUTCall(body, subscriptionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modify an existing subscription
     * Updates an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param body Subscription to be modified (required)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @return InlineSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineSubscription subscriptionsPUT(InlineSubscription body, String subscriptionId) throws ApiException {
        ApiResponse<InlineSubscription> resp = subscriptionsPUTWithHttpInfo(body, subscriptionId);
        return resp.getData();
    }

    /**
     * Modify an existing subscription
     * Updates an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param body Subscription to be modified (required)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @return ApiResponse&lt;InlineSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineSubscription> subscriptionsPUTWithHttpInfo(InlineSubscription body, String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionsPUTValidateBeforeCall(body, subscriptionId, null, null);
        Type localVarReturnType = new TypeToken<InlineSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modify an existing subscription (asynchronously)
     * Updates an existing subscription, identified by its self-referring URI returned on creation (initial POST)
     * @param body Subscription to be modified (required)
     * @param subscriptionId Subscription Id, specifically the \&quot;Self-referring URI\&quot; returned in the subscription request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionsPUTAsync(InlineSubscription body, String subscriptionId, final ApiCallback<InlineSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionsPUTValidateBeforeCall(body, subscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
